# ----- Core EMC/HAL Loads -----

# Kinematics
loadrt trivkins

# Trajectory planner
loadrt tp

# Motion controller, get name and thread periods from ini file
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[TRAJ]AXES tp=tp kins=trivkins

# Set up the pin mux using a bbio file
loadusr -w config-pin -f ./BeagleBoneBlack_CNC3018.bbio

# Load the BeagleBone component
loadrt hal_bb_gpio board=BeagleBone user_leds=2 output_pins=913

# Load the BeagleBone PRU to use for stepgen
# This configuration should result in pins 813,812 for step/dir on one 
# output/axis and pints 815/814 for the other output/axis
# loadrt hal_pru_generic prucode=$(HAL_RTMOD_DIR)/rt-preempt/pru_generic.bin pru=0 halname=hpg num_stepgens=4
loadrt [PRUCONF](DRIVER) prucode=$(HAL_RTMOD_DIR)/[PRUCONF](PRUBIN) [PRUCONF](CONFIG)


# Add functions to the servo-thread established by encmot
addf bb_gpio.write              servo-thread
addf bb_gpio.read               servo-thread
addf hpg.capture-position       servo-thread
addf hpg.update                 servo-thread
addf motion-command-handler     servo-thread
addf motion-controller          servo-thread


# ----- X-axis -----
# Axis enable chain
newsig emcmot.00.enable bit
sets emcmot.00.enable FALSE

# Axis enable signal (net input output)
net emcmot.00.enable axis.0.amp-enable-out hpg.stepgen.00.enable

# Position command and feedback signals (net input output)
net emcmot.00.pos-cmd axis.0.motor-pos-cmd hpg.stepgen.00.position-cmd
net motor.00.pos-fb hpg.stepgen.00.position-fb axis.0.motor-pos-fb

# Define the pins for the PRU
#setp hpg.stepgen.00.step_type        0  # Default is step/dir
setp hpg.stepgen.00.control-type      0  # Position mode control
setp hpg.stepgen.00.steppin         813  
setp hpg.stepgen.00.dirpin          812

# Step generation timing parameters and system limits
setp hpg.stepgen.00.dirsetup        [AXIS_0]DIRSETUP
setp hpg.stepgen.00.dirhold         [AXIS_0]DIRHOLD
setp hpg.stepgen.00.steplen         [AXIS_0]STEPLEN
setp hpg.stepgen.00.stepspace       [AXIS_0]STEPSPACE
setp hpg.stepgen.00.position-scale  [AXIS_0]SCALE
setp hpg.stepgen.00.maxvel          [AXIS_0]STEPGEN_MAX_VEL
setp hpg.stepgen.00.maxaccel        [AXIS_0]STEPGEN_MAX_ACC


# ----- Y-axis -----
# Axis enable chain
newsig emcmot.01.enable bit
sets emcmot.01.enable FALSE

# Axis enable signal (net input output)
net emcmot.01.enable axis.1.amp-enable-out hpg.stepgen.01.enable

# Position command and feedback signals (net input output)
net emcmot.01.pos-cmd axis.1.motor-pos-cmd hpg.stepgen.01.position-cmd
net motor.01.pos-fb hpg.stepgen.01.position-fb axis.1.motor-pos-fb

# Define the pins for the PRU
#setp hpg.stepgen.01.step_type        0  # Default is step/dir
setp hpg.stepgen.01.control-type      0  # Position mode control
setp hpg.stepgen.01.steppin         815
setp hpg.stepgen.01.dirpin          814

setp hpg.stepgen.01.dirsetup        [AXIS_1]DIRSETUP
setp hpg.stepgen.01.dirhold         [AXIS_1]DIRHOLD
setp hpg.stepgen.01.steplen         [AXIS_1]STEPLEN
setp hpg.stepgen.01.stepspace       [AXIS_1]STEPSPACE
setp hpg.stepgen.01.position-scale  [AXIS_1]SCALE
setp hpg.stepgen.01.maxvel          [AXIS_1]STEPGEN_MAX_VEL
setp hpg.stepgen.01.maxaccel        [AXIS_1]STEPGEN_MAX_ACC


# ----- Z-axis -----
# Axis enable chain
newsig emcmot.02.enable bit
sets emcmot.02.enable FALSE

# Axis enable signal (net input output)
net emcmot.02.enable axis.2.amp-enable-out hpg.stepgen.02.enable

# Position command and feedback signals (net input output)
net emcmot.02.pos-cmd axis.2.motor-pos-cmd hpg.stepgen.02.position-cmd
net motor.02.pos-fb hpg.stepgen.02.position-fb axis.2.motor-pos-fb

# Define the pins for the PRU
#setp hpg.stepgen.02.step_type        0  # Default is step/dir
setp hpg.stepgen.02.control-type      0  # Position mode control
setp hpg.stepgen.02.steppin         819
setp hpg.stepgen.02.dirpin          818

setp hpg.stepgen.02.dirsetup        [AXIS_2]DIRSETUP
setp hpg.stepgen.02.dirhold         [AXIS_2]DIRHOLD
setp hpg.stepgen.02.steplen         [AXIS_2]STEPLEN
setp hpg.stepgen.02.stepspace       [AXIS_2]STEPSPACE
setp hpg.stepgen.02.position-scale  [AXIS_2]SCALE
setp hpg.stepgen.02.maxvel          [AXIS_2]STEPGEN_MAX_VEL
setp hpg.stepgen.02.maxaccel        [AXIS_2]STEPGEN_MAX_ACC



# ----- Standard I/O Block - EStop, Etc -----
# Create a signal for the estop loopback
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in

# Set up the enable pin. One is shared between all steppers. Here, we'll just 
# turn enable the motors. To make a high signal mean enabled (the driver wants
# enable pulled low to be on), we invert the pin
setp bb_gpio.p9.out-13.invert 1

# And attach the controller enable to the axes
net emcmot.00.enable bb_gpio.p9.out-13
#net emcmot.01.enable bb_gpio.p9.out-13
#net emcmot.02.enable bb_gpio.p9.out-13


## Create two threads, a fast one with a period of 50 microseconds 
# and a slow one with a period of 1 millisecond.
# loadrt threads name1=step-thread period1=1000000
# 
# # Connect the cosine output to the hpg.00.position-cmd input - X-axis
# net X-vel siggen.0.cosine hpg.stepgen.00.position-cmd 
# 
# # Connect the triangle output to the hpg.01.position-cmd - Y-axis
# net Y-vel siggen.0.triangle hpg.stepgen.01.position-cmd 
# 
# # And the same for the Z-axis
# net Z-vel siggen.0.sine hpg.stepgen.02.position-cmd
# 
# # Set up the enable pin. One is shared between all steppers. Here, we'll just 
# # turn enable the motors. 
# #
# # To make a high signal mean enabled (the driver wants enable pulled low to be on)
# # We invert the pin
# setp bb_gpio.p9.out-13.invert 1
# 
# # Then, set it high (which, because of the inversion means it gets pulled low)
# setp bb_gpio.p9.out-13 1
# 
# # And enable the step generation
# setp hpg.stepgen.00.enable 1
# setp hpg.stepgen.01.enable 1
# setp hpg.stepgen.02.enable 1